<?php

/**
 * @file
 * Functions to support theming in the HDBT Subtheme.
 */

declare(strict_types=1);

use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Render\Element;
use Drupal\Core\Url;
use Drupal\node\NodeInterface;

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_block(&$variables): void {
  if (isset($variables['elements']['#id'])) {
    $variables['content']['#attributes']['block_id'] = $variables['elements']['#id'];
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_block__views_block__of_interest(&$variables): void {
  // Get the search page nid from config.
  $config = \Drupal::config('helfi_rekry_content.job_listings');
  $search_page_nid = $config->get('search_page');

  if (!$search_page_nid) {
    return;
  }

  $node = \Drupal::routeMatch()->getParameter('node');
  if ($node->getType() !== 'job_listing') {
    return;
  }

  if ($task_area_term = $node->get('field_task_area')?->first()?->get('entity')?->getValue()) {
    $options = [
      'query' => ['task_areas' => $task_area_term->get('field_external_id')->value],
      'absolute' => TRUE,
    ];
    $alias = Url::fromRoute('entity.node.canonical', ['node' => $search_page_nid], $options);

    if ($alias) {
      $variables['related_jobs_link'] = $alias;
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Default template: organization-information-block.html.twig.
 *
 * @throws \Drupal\Component\Plugin\Exception\InvalidPluginDefinitionException
 * @throws \Drupal\Component\Plugin\Exception\PluginNotFoundException
 */
function hdbt_subtheme_preprocess_organization_information_block(array &$variables): void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Helpful $content variable for template.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Set city description title and text variables.
  $job_listings_config = \Drupal::config('helfi_rekry_content.job_listings');
  $variables['content']['city_description_title'] = $job_listings_config->get('city_description_title');
  $variables['content']['city_description_text'] = $job_listings_config->get('city_description_text');

  if (!empty($variables['elements']['field_organization_override']['#items'])) {
    $organization_field = $variables['elements']['field_organization_override']['#items'];
  }
  else {
    $organization_field = $variables['elements']['field_organization']['#items'];
  }

  // Get organization.
  if (!empty($organization_field)) {
    $organization_id = $organization_field->target_id;
    $organization = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($organization_id);
  }

  // Set organization default image variable.
  if (!empty($organization) && !empty($organization->get('field_default_image')->first())) {
    $variables['content']['organization_default_image'] = $organization->get('field_default_image')->first()->view([
      'type' => 'responsive_image',
      'label' => 'hidden',
      'settings' => [
        'responsive_image_style' => 'job_listing_org',
        'image_link' => '',
        'image_loading' => [
          'attribute' => 'eager',
        ],
      ],
    ]);
  }

  // Set organization description from taxonomy term if it's missing from node.
  if (!empty($organization) && $node = \Drupal::routeMatch()->getParameter('node')) {
    if (!$node->field_organization_description_o->isEmpty()) {
      $variables['content']['field_organization_description'] = $variables['content']['field_organization_description_o'];
    }
    elseif ($node->field_organization_description->isEmpty() && !empty($org_description = $organization->getDescription())) {
      $variables['content']['field_organization_description'] = strip_tags($org_description);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 *
 * Adds number of open vacancies for job listing title field template.
 *
 * @throws \Drupal\Core\TypedData\Exception\MissingDataException
 */
function hdbt_subtheme_preprocess_field(&$variables): void {
  // Return yearly if not processing job listing title.
  if (
    $variables['field_name'] != 'title' ||
    $variables['element']['#entity_type'] != 'node' ||
    $variables['element']['#bundle'] != 'job_listing'
  ) {
    return;
  }

  if ($node = $variables['element']['#object']) {
    /** @var \Drupal\node\NodeInterface $node */
    $variables['vacancies'] = (int) $node->get('field_jobs')?->first()?->getString();
  }
}

/**
 * Implements hook_theme_suggestions_HOOK() for blocks.
 */
function hdbt_subtheme_theme_suggestions_block_alter(&$suggestions) {
  // Load theme suggestions for blocks from parent theme.
  foreach ($suggestions as &$suggestion) {
    $suggestion = str_replace('hdbt_subtheme_', '', $suggestion);
  }
}

/**
 * Implements hook_theme_suggestions_HOOK_alter().
 */
function hdbt_subtheme_theme_suggestions_menu_alter(&$suggestions, $variables) {
  if (isset($variables['attributes']['block_id'])) {
    $block_id = str_replace('hdbt_subtheme_', '', $variables['attributes']['block_id']);

    $suggestions[] = match ($block_id) {
      'mobile_navigation' => 'menu__mobile',
      'mainnavigation' => 'menu__main__desktop',
      'main_navigation_level_2' => 'menu__main__sidebar',
      'brandingnavigation' => 'menu__main__branding',
      default => 'menu__' . $variables['attributes']['block_id'],
    };
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_page(&$variables): void {
  // Handle sidebar visibility.
  $entity = hdbt_admin_tools_get_page_entity();
  if ($entity instanceof NodeInterface) {

    // Handle first and second sidebar visibility for the "Job listing"
    // (job_listing) content type.
    if ($entity->getType() === 'job_listing') {
      $variables['has_sidebar_second'] = TRUE;
      $variables['#attached']['library'][] = 'hdbt_subtheme/datetime_comparison';
    }
  }
}

/**
 * Implements hook_preprocess_node().
 */
function hdbt_subtheme_preprocess_node(&$variables): void {
  $node = $variables['node'];

  if ($node->getType() !== 'job_listing') {
    return;
  }

  if ($task_area_term = $node->get('field_task_area')?->first()?->get('entity')?->getValue()) {
    $langcode = \Drupal::languageManager()->getCurrentLanguage()->getId();
    $variables['task_area_name'] = $task_area_term->label();

    if ($task_area_term->hasTranslation($langcode)) {
      $variables['task_area_name'] = $task_area_term->getTranslation($langcode)->label();
    }

    // Get the search page nid from config.
    $config = \Drupal::config('helfi_rekry_content.job_listings');
    if ($search_page_nid = $config->get('search_page')) {
      $options = [
        'query' => ['task_areas' => $task_area_term->get('field_external_id')->value],
        'absolute' => TRUE,
      ];
      $variables['task_area_rekry_search_url'] = Url::fromRoute('entity.node.canonical', ['node' => $search_page_nid], $options);
    }
  }
}

/**
 * Implements hook_preprocess_HOOK().
 */
function hdbt_subtheme_preprocess_html(&$variables): void {
  /** @var \Drupal\helfi_api_base\Environment\EnvironmentResolver $resolver */
  $resolver = \Drupal::service('helfi_api_base.environment_resolver');
  /** @var \Drupal\helfi_api_base\Environment\Environment $environment */
  $environment = $resolver->getActiveEnvironment()->getEnvironmentName();

  if ($environment === 'prod') {
    $variables['#attached']['library'][] = 'hdbt_subtheme/siteimprove-analytics';
  }

  _update_job_search_task_area_page_title_tag($variables);
}

/**
 * Set title tag for job search task area pages.
 *
 * @param array $variables
 *   Variables array.
 */
function _update_job_search_task_area_page_title_tag(array &$variables) {
  $query_params = \Drupal::request()->query->all();

  if (!array_key_exists('task_areas', $query_params)) {
    return;
  }

  // Only task_area and page paramaters allowed.
  foreach ($query_params as $query_param => $query_param_value) {
    if ($query_param !== 'task_areas' && $query_param !== 'page') {
      return;
    }
  }

  // Only one task_area category allowed.
  if (substr_count(\Drupal::request()->getRequestUri(), 'task_areas') > 1) {
    return;
  }

  $langcode = \Drupal::languageManager()
    ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)
    ->getId();
  $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'task_area',
    'field_external_id' => $query_params['task_areas'],
  ]);

  $term = reset($term);
  if ($term && $term->hasTranslation($langcode)) {
    $term = $term->getTranslation($langcode);
  }

  if ($term && $term->hasField('field_metadata') && !$term->get('field_metadata')->isEmpty()) {
    $variables['head_title']['title'] = html_entity_decode($term->get('field_metadata')->getString(), ENT_QUOTES);
  }
}
