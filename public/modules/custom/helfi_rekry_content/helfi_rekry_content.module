<?php

/**
 * @file
 * Functions for helfi_rekry_content module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\node\NodeInterface;
use Drupal\migrate\MigrateSkipRowException;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disables title field for HR role when editing job listing node.
 */
function helfi_rekry_content_form_node_job_listing_edit_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $userRoles = \Drupal::currentUser()->getRoles();

  if (in_array('hr', $userRoles)) {
    $form['title']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_scheduler_allow_publishing().
 */
function helfi_rekry_content_scheduler_allow_publishing(NodeInterface $node): bool {
  if (
    $node instanceof NodeInterface &&
    $node->bundle() === 'job_listing' &&
    $node->hasField('field_prevent_publishing') &&
    $node->get('field_prevent_publishing')->getString() === '1'
  ) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Format filename from source uri.
 *
 * @param string|null $sourceUri
 *   The source uri.
 *
 * @return string|null
 *   Filename or null
 */
function _helfi_rekry_content_filename(string|NULL $sourceUri = NULL): ?string {
  if (!$sourceUri) {
    return NULL;
  }

  return strtok(basename($sourceUri), '?');
}

/**
 * Get media entity by file id.
 *
 * @param string|null $fid
 *   The file id.
 *
 * @return string|null
 *   Media entity id or null
 */
function _helfi_rekry_content_get_media_image(string|NULL $fid = NULL): ?string {
  if (!$fid) {
    return NULL;
  }

  $entityQuery = \Drupal::entityQuery('media')
    ->condition('bundle', 'job_listing_image')
    ->condition('field_media_image.target_id', $fid);
  $ids = $entityQuery->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Get media entity by file id.
 *
 * @param string|null $url
 *   The video url.
 *
 * @return string|null
 *   Valid video url or null
 */
function _helfi_rekry_check_video_url(string|NULL $url = NULL): ?string {
  try {
    $resolver = \Drupal::service('media.oembed.url_resolver');
    $validate = $resolver->getProviderByUrl($url);
    return $url;
  }
  catch (\throwable $e) {
    \Drupal::logger('helfi_rekry_content')->notice('Video embed url "' . $url . '" failed validation with message: ' . $e->getMessage());
    throw new MigrateSkipRowException();
  }
}

/**
 * Get media entity by file id.
 *
 * @param string|null $url
 *   The video url.
 *
 * @throws \Drupal\migrate\MigrateSkipRowException
 */
function _helfi_rekry_check_video_existance(string|NULL $url = NULL): void {
  if (_helfi_rekry_content_lookup_video_mid($url)) {
    throw new MigrateSkipRowException();
  }
}

/**
 * Get video mid by video url.
 *
 * @param string $url
 *   The video url.
 *
 * @return string|null
 *   The mid or null
 */
function _helfi_rekry_content_lookup_video_mid(string $url): ?string {
  $entityQuery = \Drupal::entityQuery('media')
    ->condition('bundle', 'remote_video')
    ->condition('field_media_oembed_video', $url)
    ->range(0, 1)
    ->latestRevision();
  $ids = $entityQuery->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Get node id by recruitment id.
 *
 * @param string $id
 *   The recruitment id.
 *
 * @return string|null
 *   The nid or null
 */
function _helfi_rekry_content_lookup_job_nid(string $id): ?string {
  $entityQuery = \Drupal::entityQuery('node')
    ->condition('type', 'job_listing')
    ->condition('field_recruitment_id', $id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $entityQuery->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Add http protocol to urls, since api response might not have themm.
 *
 * @param string|null $url
 *   The url.
 *
 * @return string|null
 *   The resulting url or null
 */
function _helfi_rekry_add_schema(string|NULL $url = NULL): ?string {
  if ($url && parse_url($url, PHP_URL_SCHEME) === NULL) {
    return 'https://' . $url;
  }

  return $url;
}

/**
 * Implements hook_theme().
 */
function helfi_rekry_content_theme() {
  return [
    'organization_information_block' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_rekry_content_preprocess_field(&$variables) {
  $node = $variables['element']['#object'];

  // Return early if there's no need to expose original language.
  if (
    !$node instanceof NodeInterface ||
    $node->getType() !== 'job_listing' ||
    ($node->hasField('field_copied') && $node->get('field_copied')->isEmpty()) ||
    ($node->hasField('field_original_language') && $node->get('field_original_language')->isEmpty())
  ) {
    return;
  }

  $originalLanguage = $node->get('field_original_language')->first()->getValue()['value'];

  // Expose original language to field templates.
  $variables['original_language'] = $originalLanguage;

  // Expose original language as an attribute for these fields.
  $wrappedFields = [
    'field_salary_class',
    'field_organization_name',
  ];

  if ($variables['field_name'] && in_array($variables['field_name'], $wrappedFields)) {
    foreach ($variables['items'] as $item) {
      $item['attributes']->setAttribute('lang', 'fi');
    }
  }
}

/**
 * Combine "organization" term translations with external ID.
 */
function _helfi_rekry_content_lookup_organization_tid($external_id) {
  $ids = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', 'organization')
    ->condition('field_external_id', $external_id)
    ->execute();

  if (empty($ids)) {
    return NULL;
  }

  return reset($ids);
}

/**
 * Combine "task_area" term translations with external ID.
 */
function _helfi_rekry_content_lookup_task_area_tid($args) {

  $external_id = $args[0];
  $name = $args[1];

  $query = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', 'task_area')
    ->condition('field_external_id', $external_id);

  $ids = $query->execute();

  if ($ids) {
    return reset($ids);
  }

  // Since ext id mihgt not exist yet, try matching by name.
  $fallbackQuery = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', 'task_area')
    ->condition('name', $name);

  $ids = $fallbackQuery->execute();

  if ($ids) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_rekry_content_preprocess_block(&$variables) {

  if ($variables["plugin_id"] !== 'hero_block') {
    return;
  }

  // Get current entity and entity version.
  $entity_matcher = \Drupal::service('hdbt_content.entity_version_matcher')->getType();

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $entity_matcher['entity'];

  // No need to continue if current entity doesn't have has_hero field.
  if (
    !$entity instanceof ContentEntityInterface ||
    !$entity->hasField('field_has_hero')
  ) {
    return;
  }

  if ((bool) $entity->get('field_has_hero')->value) {
    if (
      in_array($entity->getType(), ['landing_page', 'page']) &&
      isset($entity->get('field_content')->first()->entity)
    ) {

      $first_paragraph_gray = &$variables['content']['hero_block']['#first_paragraph_grey'];

      // Check if the content field first paragraph is Job listing search
      // and add classes accordingly.
      $paragraph = $entity->get('field_content')->first()->entity;
      if (!empty($paragraph) && $paragraph->getType() === 'job_listing_search') {
        $first_paragraph_gray = 'has-first-gray-bg-block';
      }
    }
  }
}
