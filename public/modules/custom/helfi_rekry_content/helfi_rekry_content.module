<?php

/**
 * @file
 * Functions for helfi_rekry_content module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\ContentEntityInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\media\OEmbed\ProviderException;
use Drupal\media\OEmbed\ResourceException;
use Drupal\migrate\MigrateSkipRowException;
use Drupal\node\NodeInterface;
use Drupal\paragraphs\ParagraphInterface;

/**
 * Implements hook_form_FORM_ID_alter().
 */
function helfi_rekry_content_form_node_job_listing_edit_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $user_edit_access = $form_state->getFormObject()
    ->getEntity()
    ->access('edit', \Drupal::currentUser());

  // If permitted to edit entity, do nothing.
  if ($user_edit_access) {
    return;
  }

  $fields_from_tpr = [
    'title',
    'field_salary_class',
    'field_contacts',
    'field_recruitment_id',
    'field_last_changed_remote',
    'field_recruitment_type',
    'field_task_area',
    'field_publication_ends',
    'field_publication_starts',
    'field_link_to_presentation',
    'field_employment_type',
    'job_description',
    'field_organization_description',
    'field_organization',
    'field_jobs',
    'field_organization_name',
    'field_salary',
    'field_job_duration',
    'field_address',
    'field_postal_code',
    'field_postal_area',
    'field_link_to_application',
    'field_employment',
    'field_image',
    'field_video',
    'field_copied',
    'field_original_language',
    'field_anonymous',
  ];

  foreach ($fields_from_tpr as $field) {
    $form[$field]['#disabled'] = TRUE;
  }

}

/**
 * Implements hook_scheduler_allow_publishing().
 */
function helfi_rekry_content_scheduler_allow_publishing(NodeInterface $node): bool {
  if (
    $node instanceof NodeInterface &&
    $node->bundle() === 'job_listing' &&
    $node->hasField('field_prevent_publishing') &&
    $node->get('field_prevent_publishing')->getString() === '1'
  ) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Format filename from source uri.
 *
 * @param string|null $sourceUri
 *   The source uri.
 *
 * @return string|null
 *   Filename or null
 */
function _helfi_rekry_content_filename(string|NULL $sourceUri = NULL): ?string {
  if (!$sourceUri) {
    return NULL;
  }

  return strtok(basename($sourceUri), '?');
}

/**
 * Get media entity by file id.
 *
 * @param string|null $fid
 *   The file id.
 *
 * @return string|null
 *   Media entity id or null
 */
function _helfi_rekry_content_get_media_image(string|NULL $fid = NULL): ?string {
  if (!$fid) {
    return NULL;
  }

  $ids = \Drupal::entityQuery('media')
    ->condition('bundle', 'job_listing_image')
    ->condition('field_media_image.target_id', $fid)
    ->accessCheck(FALSE)
    ->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Validate and return video url, used in migration.
 *
 * @param string|null $url
 *   The video url.
 *
 * @return string|null
 *   Valid video url or null
 *
 * @throws \Drupal\migrate\MigrateSkipRowException
 */
function _helfi_rekry_content_get_video_url(string|NULL $url = NULL): ?string {
  try {
    $resolver = \Drupal::service('media.oembed.url_resolver');
    /** @var \Drupal\media\OEmbed\Provider $provider */
    $provider = $resolver->getProviderByUrl($url);
  }
  catch (\throwable $e) {
    \Drupal::logger('helfi_rekry_content')->notice('Video embed url "' . $url . '" failed validation with message: ' . $e->getMessage());
    throw new MigrateSkipRowException();
  }

  // Ticket #UHF-9069 prevent migrating bad oembed links.
  try {
    // Use the same validation used in field validation.
    $resource_url = $resolver->getResourceUrl($url);
    $resource = \Drupal::service('media.oembed.resource_fetcher')
      ->fetchResource($resource_url);
    return $url;
  }
  catch (ResourceException | ProviderException $e) {
    // fetchResource fails, the link is no good.
    if (!str_contains(strtolower($provider->getName()), 'youtube')) {
      \Drupal::logger('helfi_rekry_content')
        ->error('Bad video url rejected by oembed-validation: ' . $url);
      throw new MigrateSkipRowException();
    }

    if (strpos($url, "://") === FALSE) {
      $url = "https://$url";
    }

    // Remove all extra query parameters from youtube link.
    $querystring = parse_url($url, PHP_URL_QUERY);
    $queryParameters = [];
    parse_str($querystring, $queryParameters);
    if ($video_id = $queryParameters['v']) {
      $parts = parse_url($url);
      $path = $parts['path'];
      $host = $parts['host'];
      $scheme = $parts['scheme'] ? "{$parts['scheme']}://" : '';
      $query = http_build_query([
        'v' => $video_id,
      ]);
      $new_url = sprintf('%s%s%s?%s', $scheme, $host, rtrim($path, '/'), $query);

      \Drupal::logger('helfi_rekry_content')
        ->notice('Updated remote video query parameters, new url: ' . $new_url);

      return $new_url;
    }

    \Drupal::logger('helfi_rekry_content')
      ->error('Bad video url rejected by oembed-validation: ' . $url);
    throw new MigrateSkipRowException();
  }
}

/**
 * Get media entity by file id.
 *
 * @param string|null $url
 *   The video url.
 *
 * @throws \Drupal\migrate\MigrateSkipRowException
 */
function _helfi_rekry_content_check_video_existance(string|NULL $url = NULL): void {
  if (_helfi_rekry_content_lookup_video_mid($url)) {
    throw new MigrateSkipRowException();
  }
}

/**
 * Get video mid by video url.
 *
 * @param string $url
 *   The video url.
 *
 * @return string|null
 *   The mid or null
 */
function _helfi_rekry_content_lookup_video_mid(string $url): ?string {
  $ids = \Drupal::entityQuery('media')
    ->condition('bundle', 'remote_video')
    ->condition('field_media_oembed_video', $url)
    ->range(0, 1)
    ->latestRevision()
    ->accessCheck(FALSE)
    ->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Get node id by recruitment id.
 *
 * @param string $id
 *   The recruitment id.
 *
 * @return string|null
 *   The nid or null
 */
function _helfi_rekry_content_lookup_job_nid(string $id): ?string {
  $ids = \Drupal::entityQuery('node')
    ->condition('type', 'job_listing')
    ->condition('field_recruitment_id', $id)
    ->range(0, 1)
    ->latestRevision()
    ->accessCheck(FALSE)
    ->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Add http protocol to urls, since api response might not have themm.
 *
 * @param string|null $url
 *   The url.
 *
 * @return string|null
 *   The resulting url or null
 */
function _helfi_rekry_content_add_schema(string|NULL $url = NULL): ?string {
  if ($url && parse_url($url, PHP_URL_SCHEME) === NULL) {
    return 'https://' . $url;
  }

  return $url;
}

/**
 * Implements hook_theme().
 */
function helfi_rekry_content_theme() {
  return [
    'organization_information_block' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_rekry_content_preprocess_field(&$variables) {
  $node = $variables['element']['#object'];

  // Return early if there's no need to expose original language.
  if (
    !$node instanceof NodeInterface ||
    $node->getType() !== 'job_listing' ||
    ($node->hasField('field_copied') && $node->get('field_copied')->isEmpty()) ||
    ($node->hasField('field_original_language') && $node->get('field_original_language')->isEmpty())
  ) {
    return;
  }

  $originalLanguage = $node->get('field_original_language')->first()->getValue()['value'];

  // Expose original language to field templates.
  $variables['original_language'] = $originalLanguage;
  $inlineFields = [
    'title',
    'field_salary',
    'field_job_duration',
    'field_address',
  ];

  // Use span instead of div for inline fields.
  if (isset($variables['field_name']) && in_array($variables['field_name'], $inlineFields)) {
    $variables['original_language_inline'] = TRUE;
  }

  // Expose original language as an attribute for these fields.
  $wrappedFields = [
    'field_salary_class',
    'field_organization_name',
  ];

  if (isset($variables['field_name']) && in_array($variables['field_name'], $wrappedFields)) {
    foreach ($variables['items'] as $item) {
      $item['attributes']->setAttribute('lang', 'fi');
    }
  }
}

/**
 * Combine "organization" term translations with external ID.
 */
function _helfi_rekry_content_lookup_organization_tid($external_id) {
  $ids = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', 'organization')
    ->condition('field_external_id', $external_id)
    ->accessCheck(FALSE)
    ->execute();

  if (empty($ids)) {
    return NULL;
  }

  return reset($ids);
}

/**
 * Combine "task_area" term translations with external ID.
 */
function _helfi_rekry_content_lookup_task_area_tid($args) {

  $external_id = $args[0];
  $name = $args[1];

  $ids = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', 'task_area')
    ->condition('field_external_id', $external_id)
    ->accessCheck(FALSE)
    ->execute();

  if ($ids) {
    return reset($ids);
  }

  // Since ext id might not exist yet, try matching by name.
  $ids = \Drupal::entityQuery('taxonomy_term')
    ->condition('vid', 'task_area')
    ->condition('name', $name)
    ->accessCheck(FALSE)
    ->execute();

  if ($ids) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Transform illegal values from api.
 *
 * @param string $employment
 *   The original string.
 *
 * @return string
 *   The corrected value.
 */
function _helfi_rekry_content_transform_employment($employment) {
  if ($employment === 'Vuorotteluvapaasijaisuus') {
    return 'Vuorotteluvapaan sijaisuus';
  }

  return $employment;
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_rekry_content_preprocess_block(&$variables) {
  if ($variables['plugin_id'] !== 'hero_block') {
    return;
  }

  // Get current entity and entity version.
  $entity_matcher = \Drupal::service('helfi_platform_config.entity_version_matcher')->getType();

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $entity_matcher['entity'];

  // No need to continue if current entity doesn't have hero set.
  if (
    !$entity instanceof ContentEntityInterface ||
    !$entity->hasField('field_has_hero') ||
    !(bool) $entity->get('field_has_hero')->value ||
    $entity->get('field_content')->isEmpty()
  ) {
    return;
  }
  $paragraph = $entity->get('field_content')->first()->get('entity')->getValue();

  if (
    empty($paragraph) ||
    !in_array($entity->getType(), ['landing_page', 'page']) ||
    !$paragraph instanceof ParagraphInterface
  ) {
    return;
  }
  $first_paragraph_gray = &$variables['content']['hero_block']['#first_paragraph_grey'];

  // Check if the content field first paragraph is Job listing search
  // and add classes accordingly.
  if ($paragraph->getType() === 'job_listing_search') {
    $first_paragraph_gray = 'has-first-gray-bg-block';
  }
}
