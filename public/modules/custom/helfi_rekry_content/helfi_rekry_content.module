<?php

/**
 * @file
 * Functions for helfi_rekry_content module.
 */

declare(strict_types = 1);

use Drupal\Core\Render\Element;

/**
 * Format filename from source uri.
 *
 * @param string|null $sourceUri
 *   The source uri.
 *
 * @return string|null
 *   Filename or null
 */
function _helfi_rekry_content_filename(string|NULL $sourceUri = NULL): ?string {
  if (!$sourceUri) {
    return NULL;
  }

  return strtok(basename($sourceUri), '?');
}

/**
 * Get media entity by file id.
 *
 * @param string|null $fid
 *   The file id.
 *
 * @return string|null
 *   Media entity id or null
 */
function _helfi_rekry_content_get_media_image(string|NULL $fid = NULL): ?string {
  if (!$fid) {
    return NULL;
  }

  $entityQuery = \Drupal::entityQuery('media')
    ->condition('bundle', 'job_listing_image')
    ->condition('field_media_image.target_id', $fid);
  $ids = $entityQuery->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Get node id by recruitment id.
 *
 * @param string $id
 *   The recruitment id.
 *
 * @return string|null
 *   The nid or null
 */
function _helfi_rekry_content_lookup_job_nid($id): ?string {
  $entityQuery = \Drupal::entityQuery('node')
    ->condition('type', 'job_listing')
    ->condition('field_recruitment_id', $id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $entityQuery->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Add http protocol to urls, since api response might not have themm.
 *
 * @param string|null $url
 *   The url.
 *
 * @return string|null
 *   The resulting url or null
 */
function _helfi_rekry_add_schema($url = NULL): ?string {
  if ($url && parse_url($url, PHP_URL_SCHEME) === NULL) {
    return 'https://' . $url;
  }

  return $url;
}

/**
 * Implements hook_theme().
 */
function helfi_rekry_content_theme() {
  return [
    'organization_information_block' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for organization_information_block template.
 *
 * Default template: organization-information-block.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_organization_information_block(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }
}
