<?php

/**
 * @file
 * Functions for helfi_rekry_content module.
 */

declare(strict_types=1);

use Drupal\Core\Entity\EntityFormInterface;
use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Language\LanguageInterface;
use Drupal\Core\Site\Settings;
use Drupal\helfi_platform_config\DTO\ParagraphTypeCollection;
use Drupal\helfi_rekry_content\Entity\JobListing;
use Drupal\media\OEmbed\ProviderException;
use Drupal\media\OEmbed\ResourceException;
use Drupal\media\OEmbed\ResourceFetcherInterface;
use Drupal\media\OEmbed\UrlResolverInterface;
use Drupal\migrate\MigrateSkipRowException;
use Drupal\node\NodeInterface;
use Drupal\views\Plugin\views\query\QueryPluginBase;
use Drupal\views\ViewExecutable;

/**
 * Implements hook_entity_bundle_info_alter().
 */
function helfi_rekry_content_entity_bundle_info_alter(array &$bundles): void {
  if (isset($bundles['node']['job_listing'])) {
    $bundles['node']['job_listing']['class'] = JobListing::class;
  }
}

/**
 * Implements hook_form_FORM_ID_alter().
 */
function helfi_rekry_content_form_node_job_listing_edit_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $formObject = $form_state->getFormObject();
  assert($formObject instanceof EntityFormInterface);
  $user_edit_access = $formObject
    ->getEntity()
    ->access('edit', \Drupal::currentUser());

  // If permitted to edit entity, do nothing.
  if ($user_edit_access) {
    return;
  }

  $fields_from_tpr = [
    'title',
    'field_salary_class',
    'field_contacts',
    'field_recruitment_id',
    'field_last_changed_remote',
    'field_recruitment_type',
    'field_task_area',
    'field_publication_ends',
    'field_publication_starts',
    'field_link_to_presentation',
    'field_employment_type',
    'job_description',
    'field_organization_description',
    'field_organization',
    'field_jobs',
    'field_organization_name',
    'field_salary',
    'field_job_duration',
    'field_address',
    'field_postal_code',
    'field_postal_area',
    'field_link_to_application',
    'field_employment',
    'field_image',
    'field_video',
    'field_original_language',
    'field_anonymous',
  ];

  foreach ($fields_from_tpr as $field) {
    $form[$field]['#disabled'] = TRUE;
  }

}

/**
 * Implements hook_scheduler_allow_publishing().
 */
function helfi_rekry_content_scheduler_allow_publishing(NodeInterface $node): bool {
  if (
    $node instanceof NodeInterface &&
    $node->bundle() === 'job_listing' &&
    $node->hasField('field_prevent_publishing') &&
    $node->get('field_prevent_publishing')->getString() === '1'
  ) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Format filename from source uri.
 *
 * @param string|null $sourceUri
 *   The source uri.
 *
 * @return string|null
 *   Filename or null
 */
function _helfi_rekry_content_filename(?string $sourceUri = NULL): ?string {
  if (!$sourceUri) {
    return NULL;
  }
  // Parse the filename from given URL. The url is something like:
  // https://helbit.fi/portal-api/recruitment/images/L%C3%A4%C3%A4k%C3%A4ri_sairaanhoitaja_k%C3%A4yt%C3%A4v%C3%A4ll%C3%A4.png?target=1&id=26398.
  $filename = urldecode(strtok(basename($sourceUri), '?'));
  // Transliterate and normalize the filename.
  $filename = str_replace(['ä', 'ö', 'å'], ['a', 'o', 'aa'], strtolower($filename));
  return preg_replace('/[ +]/', '_', $filename);
}

/**
 * Get media entity by file id.
 *
 * @param string|null $fid
 *   The file id.
 *
 * @return string|null
 *   Media entity id or null
 */
function _helfi_rekry_content_get_media_image(string|NULL $fid = NULL): ?string {
  if (!$fid) {
    return NULL;
  }

  $ids = \Drupal::entityQuery('media')
    ->condition('bundle', 'job_listing_image')
    ->condition('field_media_image.target_id', $fid)
    ->accessCheck(FALSE)
    ->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Validate and return video url, used in migration.
 *
 * @param string $url
 *   The video url.
 *
 * @return string
 *   Valid video url
 *
 * @throws \Drupal\migrate\MigrateSkipRowException
 */
function _helfi_rekry_content_get_video_url(string $url): string {
  try {
    /** @var \Drupal\media\OEmbed\UrlResolverInterface $resolver */
    $resolver = \Drupal::service(UrlResolverInterface::class);

    $provider = $resolver->getProviderByUrl($url);

    if (!in_array($provider->getName(), ['YouTube', 'Icareus Suite'])) {
      throw new MigrateSkipRowException(save_to_map: FALSE);
    }
  }
  catch (ResourceException | ProviderException | InvalidArgumentException $e) {
    \Drupal::logger('helfi_rekry_content')
      ->notice('Video embed url "' . $url . '" failed validation with message: ' . $e->getMessage());

    throw new MigrateSkipRowException(save_to_map: FALSE);
  }

  // Ticket #UHF-9069 prevent migrating bad oembed links.
  try {
    // Use the same validation used in field validation.
    $resource_url = $resolver->getResourceUrl($url);
    \Drupal::service(ResourceFetcherInterface::class)
      ->fetchResource($resource_url);
    return $url;
  }
  catch (ResourceException | ProviderException $e) {
    // fetchResource fails, the link is no good.
    \Drupal::logger('helfi_rekry_content')
      ->error('Bad video url rejected by oembed-validation: ' . $url);

    throw new MigrateSkipRowException(save_to_map: FALSE);
  }
}

/**
 * Sanitize video url.
 *
 * @param string $url
 *   Previous video url.
 *
 * @returns string
 *   New video url.
 */
function _helfi_rekry_content_sanitize_video_url(string $url): string {
  if (!$url || !($url = trim($url))) {
    return $url;
  }

  // Some valid YouTube links are not recognized by drupal/oembed_providers
  // module, which triggers additional network requests that attempt to sniff
  // oembed links directly from YouTube. However, YouTube does not like
  // automated traffic from datacenters, so these requests often fail in
  // production.
  //
  // This regex tries to pick video id from following patters and
  // formats the links to the expected format.
  //
  // Features:
  // - https:// or www. missing.
  // - youtube.com/v/[id].
  // - youtu.be/[id] short links.
  // - youtube.com/embed/[id].
  if (preg_match("/youtu(?:.*\/v\/|.*v=|\.be\/|.*\/embed\/)([A-Za-z0-9_\-]{11})/", $url, $matches)) {
    $url = sprintf("https://www.youtube.com/watch?v=%s", $matches[1]);
  }

  return $url;
}

/**
 * Get node id by recruitment id.
 *
 * @param string $id
 *   The recruitment id.
 *
 * @return string|null
 *   The nid or null
 */
function _helfi_rekry_content_lookup_job_nid(string $id): ?string {
  $ids = \Drupal::entityQuery('node')
    ->condition('type', 'job_listing')
    ->condition('field_recruitment_id', $id)
    ->range(0, 1)
    ->accessCheck(FALSE)
    ->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Add http protocol to urls, since api response might not have them.
 *
 * @param string|null $url
 *   The url.
 *
 * @return string|null
 *   The resulting url or null
 */
function _helfi_rekry_content_add_schema(string|NULL $url = NULL): ?string {
  if ($url && parse_url($url, PHP_URL_SCHEME) === NULL) {
    return 'https://' . $url;
  }

  return $url;
}

/**
 * Implements hook_theme().
 */
function helfi_rekry_content_theme() : array {
  return [
    'organization_information_block' => [
      'variables' => [
        'city_description_title' => NULL,
        'city_description_text' => NULL,
        'organization_title' => NULL,
        'organization_image' => NULL,
        'organization_description' => NULL,
      ],
    ],
  ];
}

/**
 * Implements hook_preprocess_HOOK().
 */
function helfi_rekry_content_preprocess_field(&$variables) {
  $node = $variables['element']['#object'];

  // Return early if there's no need to expose original language.
  if (
    !$node instanceof NodeInterface ||
    $node->getType() !== 'job_listing' ||
    ($node->hasField('field_original_language') && $node->get('field_original_language')->isEmpty())
  ) {
    return;
  }

  $originalLanguage = $node->get('field_original_language')->first()->getValue()['value'];

  // Expose original language to field templates.
  $variables['original_language'] = $originalLanguage;
  $inlineFields = [
    'title',
    'field_salary',
    'field_job_duration',
    'field_address',
  ];

  // Use span instead of div for inline fields.
  if (isset($variables['field_name']) && in_array($variables['field_name'], $inlineFields)) {
    $variables['original_language_inline'] = TRUE;
  }

  // Expose original language as an attribute for these fields.
  $wrappedFields = [
    'field_salary_class',
    'field_organization_name',
  ];

  if (isset($variables['field_name']) && in_array($variables['field_name'], $wrappedFields)) {
    foreach ($variables['items'] as $item) {
      $item['attributes']->setAttribute('lang', 'fi');
    }
  }
}

/**
 * Lookup taxonomy term id.
 *
 * @param string $vid
 *   Vocabulary id.
 * @param string|int|null $external_id
 *   External id.
 * @param string|null $name
 *   Term name.
 *
 * @return string|null
 *   Taxonomy term ID or NULL.
 */
function _helfi_rekry_content_lookup_taxonomy_term_id(string $vid, string|int|null $external_id, ?string $name) : ?string {
  if ($external_id) {
    $ids = \Drupal::entityQuery('taxonomy_term')
      ->condition('vid', $vid)
      ->condition('field_external_id', $external_id)
      ->accessCheck(FALSE)
      ->execute();

    if ($ids) {
      return reset($ids);
    }
  }

  if ($name) {
    // Since ext id might not exist yet, try matching by name.
    $ids = \Drupal::entityQuery('taxonomy_term')
      ->condition('vid', $vid)
      ->condition('name', $name)
      ->accessCheck(FALSE)
      ->execute();

    if ($ids) {
      return reset($ids);
    }
  }

  return NULL;
}

/**
 * Combine "organization" term translations with external ID.
 */
function _helfi_rekry_content_lookup_organization_tid($external_id) : ?string {
  return _helfi_rekry_content_lookup_taxonomy_term_id('organization', $external_id, NULL);
}

/**
 * Combine "task_area" term translations with external ID.
 */
function _helfi_rekry_content_lookup_task_area_tid(array $args) : ?string {
  [$external_id, $name] = $args;

  return _helfi_rekry_content_lookup_taxonomy_term_id('task_area', $external_id, $name);
}

/**
 * Lookup "employment" term id.
 *
 * @param array $args
 *   Employment and employment id.
 *
 * @return string|null
 *   Employment term id or NULL on failure.
 */
function _helfi_rekry_content_lookup_employment(array $args) : ?string {
  [$employment_id, $employment] = $args;

  // Normalize employment name.
  if ($employment === 'Vuorotteluvapaasijaisuus') {
    $employment = 'Vuorotteluvapaan sijaisuus';
  }

  return _helfi_rekry_content_lookup_taxonomy_term_id('employment', $employment_id, $employment);
}

/**
 * Lookup "employment_type" term id.
 *
 * @param array $args
 *   Employment and employment id.
 *
 * @return string|null
 *   Employment term id or NULL on failure.
 */
function _helfi_rekry_content_lookup_employment_type(array $args) : ?string {
  [$employment_type_id, $employment_type] = $args;

  return _helfi_rekry_content_lookup_taxonomy_term_id('employment_type', $employment_type_id, $employment_type);
}

/**
 * Implements hook_first_paragraph_grey_alter().
 */
function helfi_rekry_content_first_paragraph_grey_alter(array &$paragraphs): void {
  $paragraphs[] = 'job_search';
}

/**
 * Implements hook_views_query_alter().
 */
function helfi_rekry_content_views_query_alter(ViewExecutable $view, QueryPluginBase $query) {
  if ($view->id() !== 'job_listing_search') {
    return;
  }

  if (!isset($query->where[0]["conditions"][0])) {
    return;
  }

  $task_area_external_id = $query
    ->where[0]["conditions"][0]["value"][":node__field_task_area_field_task_area_target_id"];

  if (!$task_area_external_id) {
    return;
  }

  $terms = \Drupal::entityTypeManager()
    ->getStorage('taxonomy_term')
    ->loadByProperties(['field_external_id' => $task_area_external_id]);
  if (!$terms) {
    return;
  }

  /** @var \Drupal\taxonomy\Entity\Term $term */
  $term = reset($terms);
  $query->where[0]["conditions"][0]["value"][":node__field_task_area_field_task_area_target_id"] = $term->id();
}

/**
 * Implements hook_page_attachments().
 */
function helfi_rekry_content_page_attachments(array &$attachments) : void {

  // Get current entity and entity version.
  $entity_matcher = \Drupal::service('helfi_platform_config.entity_version_matcher')->getType();

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $entity_matcher['entity'];

  // No need to continue if entity is not job listing.
  if (!$entity instanceof JobListing) {
    return;
  }

  /** @var \Drupal\helfi_rekry_content\Entity\JobListing $job_listing */
  $job_listing = $entity;

  /** @var Drupal\Core\Extension\ThemeHandler $theme_handler */
  $theme_handler = Drupal::service('theme_handler');

  $logo_image_url = '';
  // Get the default share image as structured data logo.
  if ($theme_handler->themeExists('hdbt')) {
    $theme = $theme_handler->getTheme('hdbt');
    $current_language = \Drupal::languageManager()
      ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)->getId();
    $logo_file_name = $current_language === 'sv' ? 'og-global-sv.png' : 'og-global.png';

    /** @var \Drupal\Core\File\FileUrlGeneratorInterface $file_url_generator */
    $file_url_generator = \Drupal::service('file_url_generator');
    $logo_image_url = $file_url_generator->generate("{$theme->getPath()}/src/images/{$logo_file_name}")
      ->setAbsolute()
      ->toString();
  }

  $structured_data = json_encode([
    '@context' => 'https://schema.org/',
    '@type' => 'JobPosting',
    'title' => $job_listing->getTitle(),
    'description' => $job_listing->getJobDescription(),
    'identifier' => [
      '@type' => 'PropertyValue',
      'name' => t('City of Helsinki'),
      'value' => $job_listing->get('field_recruitment_id')->value,
    ],
    'datePosted' => $job_listing->getFormattedStartTime(),
    'validThrough' => $job_listing->get('field_publication_ends')->value,
    'employmentType' => $job_listing->getEmploymentType(),
    'hiringOrganization' => [
      '@type' => 'Organization',
      'name' => $job_listing->getOrganizationName(),
      'sameAs' => 'https://hel.fi/',
      'logo' => $logo_image_url,
    ],
    'jobLocation' => [
      '@type' => 'Place',
      'address' => [
        '@type' => 'PostalAddress',
        'streetAddress' => $job_listing->get('field_address')->value,
        'addressRegion' => $job_listing->get('field_postal_area')->value,
        'postalCode' => $job_listing->get('field_postal_code')->value,
        'addressCountry' => t('Finland'),
      ],
    ],
  ]);

  if (array_key_exists('#attached', $attachments)) {
    $attachments['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#attributes' => [
          'type' => 'application/ld+json',
        ],
        '#value' => $structured_data,
      ],
      'structured_job_listing_data',
    ];
  }
}

/**
 * Implements hook_page_attachments_alter().
 *
 * Update job search's task area pages metadata.
 */
function helfi_rekry_content_page_attachments_alter(array &$attachments) {
  $queryParams = \Drupal::request()->query->all();

  if (!array_key_exists('task_areas', $queryParams)) {
    return;
  }

  // Only task_area and page paramaters allowed.
  foreach ($queryParams as $queryParam => $queryParamValue) {
    if ($queryParam !== 'task_areas' && $queryParam !== 'page') {
      return;
    }
  }

  // Only one task_area category allowed.
  if (substr_count(\Drupal::request()->getRequestUri(), 'task_areas') > 1) {
    return;
  }

  $currentUri = \Drupal::request()->getUri();
  $langcode = \Drupal::languageManager()
    ->getCurrentLanguage(LanguageInterface::TYPE_CONTENT)
    ->getId();
  $term = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->loadByProperties([
    'vid' => 'task_area',
    'field_external_id' => $queryParams['task_areas'],
  ]);

  $term = reset($term);
  if ($term && $term->hasTranslation($langcode)) {
    $term = $term->getTranslation($langcode);
  }

  if ($term && $term->hasField('field_meta_description') && !$term->get('field_meta_description')->isEmpty()) {
    $description = [
      '#tag' => 'meta',
      '#attributes' => [
        'name' => 'description',
        'content' => $term->get('field_meta_description')->getString(),
      ],
    ];

    $attachments['#attached']['html_head'][] = [$description, 'description'];
  }

  foreach ($attachments['#attached']['html_head'] as $key => $head) {
    switch ($head[1]) {
      case 'canonical_url':
        $attachments['#attached']['html_head'][$key][0]['#attributes']['href'] = $currentUri;
        break;

      case 'og_url':
      case 'twitter_cards_page_url':
        $attachments['#attached']['html_head'][$key][0]['#attributes']['content'] = $currentUri;
        break;

      case 'og_title':
      case 'twitter_cards_title':
        if ($term && $term->hasField('field_metadata') && !$term->get('field_metadata')->isEmpty()) {
          $attachments['#attached']['html_head'][$key][0]['#attributes']['content'] = $term->get('field_metadata')->getString();
        }
        break;
    }
  }
}

/**
 * Implements hook_helfi_paragraph_types().
 */
function helfi_rekry_content_helfi_paragraph_types() : array {
  $entities = [
    'node' => [
      'landing_page' => [
        'field_content' => [
          'job_search' => 15,
        ],
      ],
    ],
  ];

  $enabled = [];
  foreach ($entities as $entityTypeId => $bundles) {
    foreach ($bundles as $bundle => $fields) {
      foreach ($fields as $field => $paragraphTypes) {
        foreach ($paragraphTypes as $paragraphType => $weight) {
          $enabled[] = new ParagraphTypeCollection($entityTypeId, $bundle, $field, $paragraphType, $weight);
        }
      }
    }
  }
  return $enabled;
}

/**
 * Implements hook_migration_plugins_alter().
 */
function helfi_rekry_content_migration_plugins_alter(array &$migrations): void {
  if (!Settings::get('is_azure', FALSE) && isset($migrations['helfi_rekry_images'])) {
    // Save images to local filesystem on local environment.
    $migrations['helfi_rekry_images']['source']['constants']['DRUPAL_FILE_DIRECTORY'] = 'public://job_listing_images/';
  }
}
