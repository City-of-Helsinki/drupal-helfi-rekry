<?php

/**
 * @file
 * Functions for helfi_rekry_content module.
 */

declare(strict_types = 1);

use Drupal\Core\Form\FormStateInterface;
use Drupal\Core\Render\Element;
use Drupal\node\NodeInterface;
use Drupal\migrate\MigrateSkipRowException;

/**
 * Implements hook_form_FORM_ID_alter().
 *
 * Disables title field for HR role when editing job listing node.
 */
function helfi_rekry_content_form_node_job_listing_edit_form_alter(array &$form, FormStateInterface $form_state, string $form_id): void {
  $userRoles = \Drupal::currentUser()->getRoles();

  if (in_array('hr', $userRoles)) {
    $form['title']['#disabled'] = TRUE;
  }
}

/**
 * Implements hook_scheduler_allow_publishing().
 */
function helfi_rekry_content_scheduler_allow_publishing(NodeInterface $node): bool {
  if (
    $node instanceof NodeInterface &&
    $node->bundle() === 'job_listing' &&
    $node->hasField('field_prevent_publishing') &&
    $node->get('field_prevent_publishing')->getString() === '1'
  ) {
    return FALSE;
  }

  return TRUE;
}

/**
 * Format filename from source uri.
 *
 * @param string|null $sourceUri
 *   The source uri.
 *
 * @return string|null
 *   Filename or null
 */
function _helfi_rekry_content_filename(string|NULL $sourceUri = NULL): ?string {
  if (!$sourceUri) {
    return NULL;
  }

  return strtok(basename($sourceUri), '?');
}

/**
 * Get media entity by file id.
 *
 * @param string|null $fid
 *   The file id.
 *
 * @return string|null
 *   Media entity id or null
 */
function _helfi_rekry_content_get_media_image(string|NULL $fid = NULL): ?string {
  if (!$fid) {
    return NULL;
  }

  $entityQuery = \Drupal::entityQuery('media')
    ->condition('bundle', 'job_listing_image')
    ->condition('field_media_image.target_id', $fid);
  $ids = $entityQuery->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Get media entity by file id.
 *
 * @param string|null $url
 *   The video url.
 *
 * @return string|null
 *   Valid video url or null
 */
function _helfi_rekry_check_video_url(string|NULL $url = NULL): ?string {
  try {
    $resolver = \Drupal::service('media.oembed.url_resolver');
    $validate = $resolver->getProviderByUrl($url);
    return $url;
  }
  catch (\throwable $e) {
    \Drupal::logger('helfi_rekry_content')->notice('Video embed url "' . $url . '" failed validation with message: ' . $e->getMessage());
    throw new MigrateSkipRowException();
  }
}

/**
 * Get media entity by file id.
 *
 * @param string|null $url
 *   The video url.
 *
 * @throws \Drupal\migrate\MigrateSkipRowException
 */
function _helfi_rekry_check_video_existance(string|NULL $url = NULL): void {
  if (_helfi_rekry_content_lookup_video_mid($url)) {
    throw new MigrateSkipRowException();
  }
}

/**
 * Get video mid by video url.
 *
 * @param string $url
 *   The video url.
 *
 * @return string|null
 *   The mid or null
 */
function _helfi_rekry_content_lookup_video_mid(string $url): ?string {
  $entityQuery = \Drupal::entityQuery('media')
    ->condition('bundle', 'remote_video')
    ->condition('field_media_oembed_video', $url)
    ->range(0, 1)
    ->latestRevision();
  $ids = $entityQuery->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Get node id by recruitment id.
 *
 * @param string $id
 *   The recruitment id.
 *
 * @return string|null
 *   The nid or null
 */
function _helfi_rekry_content_lookup_job_nid(string $id): ?string {
  $entityQuery = \Drupal::entityQuery('node')
    ->condition('type', 'job_listing')
    ->condition('field_recruitment_id', $id)
    ->range(0, 1)
    ->latestRevision();
  $ids = $entityQuery->execute();

  if (!empty($ids)) {
    return reset($ids);
  }

  return NULL;
}

/**
 * Add http protocol to urls, since api response might not have themm.
 *
 * @param string|null $url
 *   The url.
 *
 * @return string|null
 *   The resulting url or null
 */
function _helfi_rekry_add_schema(string|NULL $url = NULL): ?string {
  if ($url && parse_url($url, PHP_URL_SCHEME) === NULL) {
    return 'https://' . $url;
  }

  return $url;
}

/**
 * Implements hook_theme().
 */
function helfi_rekry_content_theme() {
  return [
    'organization_information_block' => [
      'render element' => 'elements',
    ],
  ];
}

/**
 * Prepares variables for organization_information_block template.
 *
 * Default template: organization-information-block.html.twig.
 *
 * @param array $variables
 *   An associative array containing:
 *   - elements: An array of elements to display in view mode.
 */
function template_preprocess_organization_information_block(array &$variables) : void {
  $variables['view_mode'] = $variables['elements']['#view_mode'];

  // Helpful $content variable for templates.
  foreach (Element::children($variables['elements']) as $key) {
    $variables['content'][$key] = $variables['elements'][$key];
  }

  // Check if there is default picture set for organization.
  if (empty($variables["elements"]["field_organization"]["#items"])) {
    return;
  }
  $organization_id = $variables["elements"]["field_organization"]["#items"]->target_id;
  $organization = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($organization_id);

  if (empty($organization->get("field_default_image")->first())) {
    return;
  }

  $organization_default_image = $organization->get("field_default_image")->first()->view([
    'type' => 'image',
    'label' => 'hidden',
    'settings' => [
      'image_style' => '3_2_m_2x',
      'image_link' => '',
    ],
  ]);
  $variables['content']['organization_default_image'] = $organization_default_image;
}
