<?php

/**
 * @file
 * Contains install functions for HELfi Rekry Content module.
 */

use Drupal\helfi_platform_config\ConfigHelper;
use Drupal\migrate\MigrateExecutable;
use Drupal\migrate\MigrateMessage;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_install().
 */
function helfi_rekry_content_install($is_syncing) {
  // Do not perform following steps if the module is being installed as part
  // of a configuration import.
  if (!$is_syncing && Drupal::moduleHandler()->moduleExists('update_helper')) {
    helfi_rekry_content_update_9001();
    helfi_rekry_content_update_9002();
    helfi_rekry_content_update_9003();
  }
}

/**
 * HELfi Rekry Content initial configurations.
 */
function helfi_rekry_content_update_9001() {
  // Install config translations.
  $configTranslationLocation = dirname(__FILE__) . '/config/language/';

  $configurations = [
    'field.field.taxonomy_term.organization.field_default_image',
    'field.field.taxonomy_term.organization.field_external_id',
    'taxonomy.vocabulary.organization',
  ];

  foreach ($configurations as $configuration) {
    ConfigHelper::installNewConfigTranslation($configTranslationLocation, $configuration);
  }
}

/**
 * HELfi Rekry content update 9002.
 */
function helfi_rekry_content_update_9002() {
  // Install config translations.
  $configTranslationLocation = dirname(__FILE__) . '/config/language/';

  $configurations = [
    'field.field.node.job_listing.field_address.yml',
    'field.field.node.job_listing.field_anonymous.yml',
    'field.field.node.job_listing.field_contacts.yml',
    'field.field.node.job_listing.field_image.yml',
    'field.field.node.job_listing.field_job_duration.yml',
    'field.field.node.job_listing.field_jobs.yml',
    'field.field.node.job_listing.field_last_changed_remote.yml',
    'field.field.node.job_listing.field_link_to_application.yml',
    'field.field.node.job_listing.field_link_to_presentation.yml',
    'field.field.node.job_listing.field_organization.yml',
    'field.field.node.job_listing.field_organization_description.yml',
    'field.field.node.job_listing.field_postal_area.yml',
    'field.field.node.job_listing.field_postal_code.yml',
    'field.field.node.job_listing.field_recruitment_id.yml',
    'field.field.node.job_listing.field_recruitment_type.yml',
    'field.field.node.job_listing.field_salary.yml',
    'field.field.node.job_listing.field_salary_class.yml',
    'field.field.node.job_listing.field_task_area.yml',
    'field.field.node.job_listing.field_video.yml',
    'field.field.node.job_listing.job_description.yml',
    'node.type.job_listing.yml',
    'taxonomy.vocabulary.task_area.yml',
  ];

  foreach ($configurations as $configuration) {
    ConfigHelper::installNewConfigTranslation($configTranslationLocation, $configuration);
  }
}

/**
 * HELfi rekry content update 9003.
 */
function helfi_rekry_content_update_9003() {

  $employmentTypeItems = [
    [
      'en' => 'Permanent contractual employment',
      'fi' => 'Vakinainen työsuhde',
      'sv' => 'Fast anställning',
    ],
    [
      'en' => 'Permanent public service employment',
      'fi' => 'Vakinainen virkasuhde',
      'sv' => 'Fast tjänst',
    ],
    [
      'en' => 'Fixed-term contractual employment',
      'fi' => 'Määräaikainen työsuhde',
      'sv' => 'Tidsbundet arbetsförhållande',
    ],
    [
      'en' => 'Fixed-term public service employment',
      'fi' => 'Määräaikainen virkasuhde',
      'sv' => 'Tjänsteförhållande på viss tid',
    ],
    [
      'en' => 'Part-time employment',
      'fi' => 'Osa-aikainen ',
      'sv' => 'Deltidsarbete',
    ],
  ];

  foreach ($employmentTypeItems as $item) {
    $term = Term::create([
      'parent' => [],
      'name' => $item['en'],
      'vid' => 'employment_type',
    ])->addTranslation('fi', [
      'name' => $item['fi'],
    ])->addTranslation('sv', [
      'name' => $item['sv'],
    ])->save();
  }

  $employmentItems = [
    [
      'en' => 'Temporary position',
      'fi' => 'Sijaisuus',
      'sv' => 'Vikariat',
    ],
    [
      'en' => 'Job alternation leave substitute',
      'fi' => 'Vuorotteluvapaan sijaisuus',
      'sv' => 'Vikariat under alterneringsledighet',
    ],
    [
      'en' => 'Project-type job',
      'fi' => 'Projektiluonteinen työ',
      'sv' => 'Projekt',
    ],
    [
      'en' => 'Apprenticeship contract',
      'fi' => 'Oppisopimus',
      'sv' => 'Läroavtal',
    ],
    [
      'en' => 'Practical training',
      'fi' => 'Harjoittelu',
      'sv' => 'Praktik',
    ],
  ];

  foreach ($employmentItems as $item) {
    $term = Term::create([
      'parent' => [],
      'name' => $item['en'],
      'vid' => 'employment',
    ])->addTranslation('fi', [
      'name' => $item['fi'],
    ])->addTranslation('sv', [
      'name' => $item['sv'],
    ])->save();
  }
}

/**
 * Cleanup "organization" taxonomy term translations.
 */
function helfi_rekry_content_update_9004() {
  // Load Swedish and English "organization" taxonomy terms.
  foreach (['sv', 'en'] as $langcode) {
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'vid' => 'organization',
        'langcode' => $langcode,
      ]);

    foreach ($terms as $term) {
      // Get the external ID.
      $external_id = $term->get('field_external_id')->getString();

      // Get the Finnish term with the external ID.
      $finnish_term_query = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties([
          'field_external_id' => $external_id,
          'langcode' => 'fi',
        ]);

      $finnish_term = reset($finnish_term_query);

      // If a translation already exists, remove it.
      if ($finnish_term->hasTranslation($langcode)) {
        $finnish_term->removeTranslation($langcode);
      }

      // Add translation to the term & save.
      $finnish_term->addTranslation($langcode, [
        'name' => $term->label(),
      ])->save();

      // Remove the original term.
      $term->delete();
    }

    // Rollback migration to allow importing new term translations.
    $migration = \Drupal::service('plugin.manager.migration')->createInstance('helfi_rekry_organizations:all_' . $langcode);
    $executable = new MigrateExecutable($migration, new MigrateMessage());
    $executable->rollback();
  }
}

/**
 * HELfi rekry content update 9005.
 */
function helfi_rekry_content_update_9005() {

  $employmentItems = [
    [
      'en' => 'Summer jobs and summer temporary posts',
      'fi' => 'Kesätyöt ja kesäsijaisuudet',
      'sv' => 'Sommarjobb',
      'search_id' => 'SUMMER_JOBS'
    ],
    [
      'en' => 'Young summer workers aged 16-17',
      'fi' => 'Nuoret 16-17 -vuotiaat kesätyöntekijät',
      'sv' => 'Sommarjobb för unga (16-17 år)',
      'search_id' => 'YOUTH_SUMMER_JOBS'
    ],
    [
      'en' => 'Siisti kesä! Project',
      'fi' => 'Siisti kesä -hanke',
      'sv' => 'Projektet En snygg sommar',
      'search_id' => 'COOL_SUMMER_PROJECT'
    ],
    [
      'en' => 'Open-ended vacancies',
      'fi' => 'Jatkuva haku',
      'sv' => 'Jatkuva haku',
      'search_id' => 'CONTINUOUS'
    ]
  ];

  foreach ($employmentItems as $item) {
    $term = Term::create([
      'parent' => [],
      'name' => $item['en'],
      'vid' => 'employment',
      'field_search_id' => $item['search_id']
    ])->addTranslation('fi', [
      'name' => $item['fi'],
    ])->addTranslation('sv', [
      'name' => $item['sv'],
    ])->save();
  }
}
