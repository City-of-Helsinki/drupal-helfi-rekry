<?php

/**
 * @file
 * Contains install functions for HELfi Rekry Content module.
 */

use Drupal\media\Entity\Media;
use Drupal\migrate\MigrateExecutable;
use Drupal\migrate\MigrateMessage;
use Drupal\search_api\Entity\Index;
use Drupal\search_api\Event\ReindexScheduledEvent;
use Drupal\search_api\Event\SearchApiEvents;
use Drupal\taxonomy\Entity\Term;

/**
 * Creates or updates required taxonomy terms.
 */
function helfi_rekry_content_ensure_taxonomy_terms(): void {
  $vocabulary = [
    'employment_type' => [
      [
        'en' => 'Permanent contractual employment',
        'fi' => 'Vakinainen työsuhde',
        'sv' => 'Fast anställning',
        'field_search_id' => 'permanent_contractual',
        'field_external_id' => '22',
      ],
      [
        'en' => 'Permanent public service employment',
        'fi' => 'Vakinainen virkasuhde',
        'sv' => 'Fast tjänst',
        'field_search_id' => 'permanent_service',
        'field_external_id' => '1177',
      ],
      [
        'en' => 'Fixed-term contractual employment',
        'fi' => 'Määräaikainen työsuhde',
        'sv' => 'Tidsbundet arbetsförhållande',
        'field_search_id' => 'fixed_contractual',
        'field_external_id' => '1178',
      ],
      [
        'en' => 'Fixed-term public service employment',
        'fi' => 'Määräaikainen virkasuhde',
        'sv' => 'Tjänsteförhållande på viss tid',
        'field_search_id' => 'fixed_service',
        'field_external_id' => '23',
      ],
      [
        'en' => 'Part-time employment',
        'fi' => 'Osa-aikainen ',
        'sv' => 'Deltidsarbete',
        'field_search_id' => 'part_time',
      ],
    ],
    'employment' => [
      [
        'en' => 'Temporary position',
        'fi' => 'Sijaisuus',
        'sv' => 'Vikariat',
        'field_search_id' => 'temporary',
        'field_external_id' => '1179',
      ],
      [
        'en' => 'Job alternation leave substitute',
        'fi' => 'Vuorotteluvapaan sijaisuus',
        'sv' => 'Vikariat under alterneringsledighet',
        'field_search_id' => 'alternation',
        'field_external_id' => '1009',
      ],
      [
        'en' => 'Project-type job',
        'fi' => 'Projektiluonteinen työ',
        'sv' => 'Projekt',
        'field_search_id' => 'project',
        'field_external_id' => '1010',
      ],
      [
        'en' => 'Apprenticeship contract',
        'fi' => 'Oppisopimus',
        'sv' => 'Läroavtal',
        'field_search_id' => 'apprenticeship',
        'field_external_id' => '22',
      ],
      [
        'en' => 'Practical training',
        'fi' => 'Harjoittelu',
        'sv' => 'Praktik',
        'field_search_id' => 'training',
        'field_external_id' => '1011',
      ],
      [
        'en' => 'Summer jobs and summer temporary posts',
        'fi' => 'Kesätyöt ja kesäsijaisuudet',
        'sv' => 'Sommarjobb',
        'field_search_id' => 'summer_jobs',
        'field_external_id' => '1016',
      ],
      [
        'en' => 'Young summer workers aged 16-17',
        'fi' => 'Nuoret 16-17 -vuotiaat kesätyöntekijät',
        'sv' => 'Sommarjobb för unga (16-17 år)',
        'field_search_id' => 'youth_summer_jobs',
      ],
      [
        'en' => 'Siisti kesä! Project',
        'fi' => 'Siisti kesä -hanke',
        'sv' => 'Projektet En snygg sommar',
        'field_search_id' => 'cool_summer_project',
      ],
      [
        'en' => 'Open-ended vacancies',
        'fi' => 'Jatkuva haku',
        'sv' => 'Jatkuva haku',
        'field_search_id' => 'continuous',
      ],
    ],
  ];

  foreach ($vocabulary as $vid => $items) {
    $byLabel = [];
    $byExternalId = [];

    /** @var \Drupal\taxonomy\Entity\Term[] $existing */
    $existing = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'vid' => $vid,
      ]);

    foreach ($existing as $existingTerm) {
      $byLabel[$existingTerm->label()] = $existingTerm;

      if (!$existingTerm->get('field_external_id')->isEmpty()) {
        $byExternalId[$existingTerm->get('field_external_id')->value] = $existingTerm;
      }
    }

    // Create / update terms.
    foreach ($items as $item) {
      // Search with external id.
      if (isset($item['field_external_id'], $byExternalId[$item['field_external_id']])) {
        $term = $byExternalId[$item['field_external_id']];
      }
      // Search with label.
      else if (isset($byLabel[$item['en']])) {
        $term = $byLabel[$item['en']];
      }
      // Create the term.
      else {
        $term = Term::create([
          'parent' => [],
          'name' => $item['en'],
          'langcode' => 'en',
          'vid' => $vid,
        ]);
      }

      // Ensure translations exists.
      foreach (['sv', 'en'] as $langcode) {
        if ($term->hasTranslation($langcode)) {
          $term
            ->getTranslation($langcode)
            ->setName($item[$langcode]);
        }
        else {
          $term
            ->addTranslation($langcode, [
              'name' => $item[$langcode]
            ]);
        }
      }

      $term
        ->setName($item['en'])
        ->set('field_external_id', $item['field_external_id'] ?? NULL)
        ->set('field_search_id', $item['field_search_id'])
        ->save();
    }
  }
}

/**
 * Implements hook_install().
 */
function helfi_rekry_content_install($is_syncing): void {
  // Do not perform following steps if the module is being installed as part
  // of a configuration import.
  if ($is_syncing) {
    return;
  }

  helfi_rekry_content_ensure_taxonomy_terms();
}


/**
 * Cleanup "organization" taxonomy term translations.
 */
function helfi_rekry_content_update_9004() {
  // Load Swedish and English "organization" taxonomy terms.
  foreach (['sv', 'en'] as $langcode) {
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'vid' => 'organization',
        'langcode' => $langcode,
      ]);

    foreach ($terms as $term) {
      // Get the external ID.
      $external_id = $term->get('field_external_id')->getString();

      // Get the Finnish term with the external ID.
      $finnish_term_query = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties([
          'field_external_id' => $external_id,
          'langcode' => 'fi',
        ]);

      $finnish_term = reset($finnish_term_query);

      // If a translation already exists, remove it.
      if ($finnish_term->hasTranslation($langcode)) {
        $finnish_term->removeTranslation($langcode);
      }

      // Add translation to the term & save.
      $finnish_term->addTranslation($langcode, [
        'name' => $term->label(),
      ])->save();

      // Remove the original term.
      $term->delete();
    }

    // Rollback migration to allow importing new term translations.
    $migration = \Drupal::service('plugin.manager.migration')->createInstance('helfi_rekry_organizations:all_' . $langcode);
    $executable = new MigrateExecutable($migration, new MigrateMessage());
    $executable->rollback();
  }
}

/**
 * HELfi rekry content update 9007.
 */
function helfi_rekry_content_update_9007() {
  $jobIndex = Index::load('job_listings');

  if (!$jobIndex) {
    return;
  }

  // Ensure tracker works.
  $jobIndex->rebuildTracker();

  // Mark index to require reindexing.
  $dispatcher = \Drupal::getContainer()->get('event_dispatcher');
  $dispatcher->dispatch(new ReindexScheduledEvent($jobIndex, TRUE), SearchApiEvents::REINDEX_SCHEDULED);
}

/**
 * UHF-9764 Remove all videos with dreambroker provider.
 */
function helfi_rekry_content_update_9008() {
  $query = \Drupal::entityQuery('media')
    ->accessCheck(FALSE)
    ->condition('bundle', 'remote_video');

  $ids = $query->execute();

  if (count($ids) === 0) {
    return;
  }

  $storage_handler = \Drupal::entityTypeManager()->getStorage("media");

  foreach ($ids as $id) {
    $media = Media::load($id);
    $url = $media->get('field_media_oembed_video')->value;

    if (str_contains($url, 'dreambroker')) {
      $query = \Drupal::entityQuery('node')
        ->accessCheck(FALSE)
        ->condition('type', 'job_listing')
        ->condition('field_video', '', '<>');

      $job_listing_nodes = $query->execute();

      foreach ($job_listing_nodes as $job_listing_node) {
        $node = \Drupal::entityTypeManager()->getStorage('node')->load($job_listing_node);
        $referenced_id = $node->get('field_video')?->first()?->get('entity')?->getValue()->id();

        if ($referenced_id === $media->id()) {
          $node->set('field_video', []);
        }
      }
      $storage_handler->delete([$media]);
    }
  }
}
