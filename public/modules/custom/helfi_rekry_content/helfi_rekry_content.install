<?php

/**
 * @file
 * Contains install functions for HELfi Rekry Content module.
 */

declare(strict_types=1);

use Drupal\Core\Entity\TranslatableInterface;
use Drupal\media\Entity\Media;
use Drupal\migrate\MigrateExecutable;
use Drupal\migrate\MigrateMessage;
use Drupal\search_api\Entity\Index;
use Drupal\search_api\Event\ReindexScheduledEvent;
use Drupal\search_api\Event\SearchApiEvents;
use Drupal\taxonomy\Entity\Term;

/**
 * Implements hook_install().
 */
function helfi_rekry_content_install($is_syncing) {
  // Do not perform following steps if the module is being installed as part
  // of a configuration import.
  if (!$is_syncing && Drupal::moduleHandler()->moduleExists('update_helper')) {
    helfi_rekry_content_update_9003();
    helfi_rekry_content_update_9004();
    helfi_rekry_content_update_9005();
    helfi_rekry_content_update_9006();
  }
}

/**
 * HELfi rekry content update 9003.
 */
function helfi_rekry_content_update_9003() {

  $employmentTypeItems = [
    [
      'en' => 'Permanent contractual employment',
      'fi' => 'Vakinainen työsuhde',
      'sv' => 'Fast anställning',
    ],
    [
      'en' => 'Permanent public service employment',
      'fi' => 'Vakinainen virkasuhde',
      'sv' => 'Fast tjänst',
    ],
    [
      'en' => 'Fixed-term contractual employment',
      'fi' => 'Määräaikainen työsuhde',
      'sv' => 'Tidsbundet arbetsförhållande',
    ],
    [
      'en' => 'Fixed-term public service employment',
      'fi' => 'Määräaikainen virkasuhde',
      'sv' => 'Tjänsteförhållande på viss tid',
    ],
    [
      'en' => 'Part-time employment',
      'fi' => 'Osa-aikainen ',
      'sv' => 'Deltidsarbete',
    ],
  ];

  foreach ($employmentTypeItems as $item) {
    Term::create([
      'parent' => [],
      'name' => $item['en'],
      'vid' => 'employment_type',
    ])->addTranslation('fi', [
      'name' => $item['fi'],
    ])->addTranslation('sv', [
      'name' => $item['sv'],
    ])->save();
  }

  $employmentItems = [
    [
      'en' => 'Temporary position',
      'fi' => 'Sijaisuus',
      'sv' => 'Vikariat',
    ],
    [
      'en' => 'Job alternation leave substitute',
      'fi' => 'Vuorotteluvapaan sijaisuus',
      'sv' => 'Vikariat under alterneringsledighet',
    ],
    [
      'en' => 'Project-type job',
      'fi' => 'Projektiluonteinen työ',
      'sv' => 'Projekt',
    ],
    [
      'en' => 'Apprenticeship contract',
      'fi' => 'Oppisopimus',
      'sv' => 'Läroavtal',
    ],
    [
      'en' => 'Practical training',
      'fi' => 'Harjoittelu',
      'sv' => 'Praktik',
    ],
  ];

  foreach ($employmentItems as $item) {
    Term::create([
      'parent' => [],
      'name' => $item['en'],
      'vid' => 'employment',
    ])->addTranslation('fi', [
      'name' => $item['fi'],
    ])->addTranslation('sv', [
      'name' => $item['sv'],
    ])->save();
  }
}

/**
 * Cleanup "organization" taxonomy term translations.
 */
function helfi_rekry_content_update_9004(): void {
  // Load Swedish and English "organization" taxonomy terms.
  foreach (['sv', 'en'] as $langcode) {
    $terms = \Drupal::entityTypeManager()
      ->getStorage('taxonomy_term')
      ->loadByProperties([
        'vid' => 'organization',
        'langcode' => $langcode,
      ]);

    foreach ($terms as $term) {
      // Get the external ID.
      $external_id = $term->get('field_external_id')->getString();

      // Get the Finnish term with the external ID.
      $finnish_term_query = \Drupal::entityTypeManager()
        ->getStorage('taxonomy_term')
        ->loadByProperties([
          'field_external_id' => $external_id,
          'langcode' => 'fi',
        ]);

      $finnish_term = reset($finnish_term_query);

      // If a translation already exists, remove it.
      if ($finnish_term->hasTranslation($langcode)) {
        $finnish_term->removeTranslation($langcode);
      }

      // Add translation to the term & save.
      $finnish_term->addTranslation($langcode, [
        'name' => $term->label(),
      ])->save();

      // Remove the original term.
      $term->delete();
    }

    // Rollback migration to allow importing new term translations.
    $migration = \Drupal::service('plugin.manager.migration')->createInstance('helfi_rekry_organizations:all_' . $langcode);
    $executable = new MigrateExecutable($migration, new MigrateMessage());
    $executable->rollback();
  }
}

/**
 * HELfi rekry content update 9005.
 */
function helfi_rekry_content_update_9005() {

  $employmentItems = [
    [
      'en' => 'Summer jobs and summer temporary posts',
      'fi' => 'Kesätyöt ja kesäsijaisuudet',
      'sv' => 'Sommarjobb',
      'field_search_id' => 'summer_jobs',
    ],
    [
      'en' => 'Young summer workers aged 16-17',
      'fi' => 'Nuoret 16-17 -vuotiaat kesätyöntekijät',
      'sv' => 'Sommarjobb för unga (16-17 år)',
      'field_search_id' => 'youth_summer_jobs',
    ],
    [
      'en' => 'Siisti kesä! Project',
      'fi' => 'Siisti kesä -hanke',
      'sv' => 'Projektet En snygg sommar',
      'field_search_id' => 'cool_summer_project',
    ],
    [
      'en' => 'Open-ended vacancies',
      'fi' => 'Jatkuva haku',
      'sv' => 'Jatkuva haku',
      'field_search_id' => 'continuous',
    ],
  ];

  foreach ($employmentItems as $item) {
    Term::create([
      'parent' => [],
      'name' => $item['en'],
      'vid' => 'employment',
      'field_search_id' => $item['field_search_id'],
    ])->addTranslation('fi', [
      'name' => $item['fi'],
    ])->addTranslation('sv', [
      'name' => $item['sv'],
    ])->save();
  }
}

/**
 * HELfi rekry content update 9006.
 */
function helfi_rekry_content_update_9006() {
  $query = \Drupal::entityQuery('taxonomy_term')
    ->accessCheck(FALSE)
    ->condition('vid', ['employment', 'employment_type'], 'IN')
    ->notExists('field_search_id', '');

  $ids = $query->execute();

  if (count($ids) === 0) {
    return;
  }

  $terms = Term::loadMultiple($ids);

  foreach ($terms as $term) {
    if (!$term->hasTranslation('en')) {
      continue;
    }

    $translation = $term->getTranslation('en');
    $name = $translation->getName();

    $search_id = match ($name) {
      'Summer jobs and summer temporary posts' => 'summer_jobs',
      'Young summer workers aged 16-17' => 'youth_summer_jobs',
      'Siisti kesä! Project' =>'cool_summer_project',
      'Permanent contractual employment' =>'permanent_contractual',
      'Permanent public service employment' =>'permanent_service',
      'Fixed-term contractual employment' =>'fixed_contractual',
      'Fixed-term public service employment' => 'fixed_service',
      'Part-time employment' =>'part_time',
      'Temporary position' =>'temporary',
      'Job alternation leave substitute' =>'alternation',
      'Project-type job' =>'project',
      'Apprenticeship contract' =>'apprenticeship',
      'Practical training' =>'training',
      default => NULL
    };

    if (!$search_id) {
      continue;
    }

    $term->set('field_search_id', $search_id);
    $term->save();
  }

}

/**
 * HELfi rekry content update 9007.
 */
function helfi_rekry_content_update_9007(): void {
  $jobIndex = Index::load('job_listings');

  if (!$jobIndex) {
    return;
  }

  // Ensure tracker works.
  $jobIndex->rebuildTracker();

  // Mark index to require reindexing.
  $dispatcher = \Drupal::getContainer()->get('event_dispatcher');
  $dispatcher->dispatch(new ReindexScheduledEvent($jobIndex, TRUE), SearchApiEvents::REINDEX_SCHEDULED);
}

/**
 * UHF-9764 Remove all videos with dreambroker provider.
 */
function helfi_rekry_content_update_9008(): void {
  $query = \Drupal::entityQuery('media')
    ->accessCheck(FALSE)
    ->condition('bundle', 'remote_video');

  $ids = $query->execute();

  if (count($ids) === 0) {
    return;
  }

  $storage_handler = \Drupal::entityTypeManager()->getStorage("media");

  foreach ($ids as $id) {
    $media = Media::load($id);
    $url = $media->get('field_media_oembed_video')->value;

    if (str_contains($url, 'dreambroker')) {
      $query = \Drupal::entityQuery('node')
        ->accessCheck(FALSE)
        ->condition('type', 'job_listing')
        ->condition('field_video', '', '<>');

      $job_listing_nodes = $query->execute();

      foreach ($job_listing_nodes as $job_listing_node) {
        $node = \Drupal::entityTypeManager()->getStorage('node')->load($job_listing_node);
        $referenced_id = $node->get('field_video')?->first()?->get('entity')?->getValue()->id();

        if ($referenced_id === $media->id()) {
          $node->set('field_video', []);
        }
      }
      $storage_handler->delete([$media]);
    }
  }
}

/**
 * UHF-8157: Clear migration maps.
 */
function helfi_rekry_content_update_9009(): void {
  $database = \Drupal::database();
  $migrations = [
    'helfi_rekry_images:all_en',
    'helfi_rekry_images:all_sv',
    'helfi_rekry_images:changed_en',
    'helfi_rekry_images:changed_sv',

    'helfi_rekry_videos:all_en',
    'helfi_rekry_videos:all_sv',
    'helfi_rekry_videos:changed_en',
    'helfi_rekry_videos:changed_sv',

    'helfi_rekry_jobs:all',
    'helfi_rekry_jobs:all_en',
    'helfi_rekry_jobs:all_sv',
    'helfi_rekry_jobs:changed',
    'helfi_rekry_jobs:changed_en',
    'helfi_rekry_jobs:changed_sv',

    'helfi_rekry_organizations:all',
    'helfi_rekry_organizations:all_sv',
    'helfi_rekry_organizations:all_en',
    'helfi_rekry_organizations:changed',
    'helfi_rekry_organizations:changed_sv',
    'helfi_rekry_organizations:changed_en',

    'helfi_rekry_task_areas:all',
    'helfi_rekry_task_areas:all_sv',
    'helfi_rekry_task_areas:all_en',
    'helfi_rekry_task_areas:changed',
    'helfi_rekry_task_areas:changed_sv',
    'helfi_rekry_task_areas:changed_en',
  ];

  foreach ($migrations as $migration) {
    $table_name = 'migrate_map_' . str_replace(':', '__', $migration);
    $database
      ->schema()
      ->dropTable($table_name);
  }
}

/**
 * Trim links.
 */
function helfi_rekry_content_update_9010(): void {
  $fields = [
    'node' => [
      'field_link_to_presentation',
    ],
  ];

  $config = \Drupal::configFactory();
  $entityUsageConfig = $config
    ->getEditable('entity_usage.settings');

  $trackEnabledSourceEntityTypes = $entityUsageConfig
    ->get('track_enabled_source_entity_types');

  // Disable entity_usage module.
  $entityUsageConfig->set('track_enabled_source_entity_types', []);
  $entityUsageConfig->save();

  $entityTypeManager = \Drupal::entityTypeManager();

  foreach ($fields as $entityType => $fields) {
    foreach ($fields as $fieldName) {
      $query = $entityTypeManager
        ->getStorage($entityType)
        ->getQuery();

      $conditionGroup = $query->orConditionGroup();
      $conditionGroup
        ->condition($fieldName, '% ', 'LIKE')
        ->condition($fieldName, ' %', 'LIKE');

      $ids = $query
        ->exists($fieldName)
        ->condition($conditionGroup)
        ->accessCheck(FALSE)
        ->execute();

      foreach ($ids as $id) {
        $entity = $entityTypeManager->getStorage($entityType)
          ->load($id);

        assert($entity instanceof TranslatableInterface);
        foreach ($entity->getTranslationLanguages() as $language) {
          $entity = $entity->getTranslation($language->getId());

          // Trim urls.
          $links = array_map(static fn ($link) => array_merge($link, [
            'uri' => trim($link['uri']),
          ]), $entity->get($fieldName)->getValue());

          $entity->set($fieldName, $links);
          $entity->save();
        }
      }
    }

    // Re-enable entity_usage module.
    $entityUsageConfig->set('track_enabled_source_entity_types', $trackEnabledSourceEntityTypes);
    $entityUsageConfig->save();
  }
}

/**
 * UHF-10406: Clear video migration map.
 */
function helfi_rekry_content_update_9011(): void {
  $database = \Drupal::database();
  $migrations = ['helfi_rekry_videos'];

  foreach ($migrations as $migration) {
    $table_name = 'migrate_map_' . $migration;
    $database
      ->schema()
      ->dropTable($table_name);
  }
}
