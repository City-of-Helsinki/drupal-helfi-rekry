<?php

/**
 * @file
 * Functions for HELfi Rekry Structured data module.
 */

declare(strict_types = 1);

use Drupal\Core\Entity\ContentEntityInterface;

/**
* Implements hook_page_attachments().
*/
function helfi_rekry_structured_data_page_attachments(array &$attachments) {

  // Get current entity and entity version.
  $entity_matcher = \Drupal::service('helfi_platform_config.entity_version_matcher')->getType();

  /** @var \Drupal\Core\Entity\ContentEntityInterface $entity */
  $entity = $entity_matcher['entity'];

  // No need to continue if current entity doesn't have hero set.
  if (
    !$entity instanceof ContentEntityInterface ||
    $entity->getType() !== 'job_listing'
  ) {
    return;
  }

  $publication_starts_datetime = strtotime($entity->get('field_publication_starts')->value);
  $publication_starts_formatted = date('Y-m-d', $publication_starts_datetime);

  if ($entity->get('field_job_description_override')->value) {
    $job_description = $entity->get('field_job_description_override')->value;
  } else {
    $job_description = $entity->get('job_description')->value;
  }

  if ($entity->get('field_organization_override')->first()->target_id) {
    $organization_entity = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($entity->get('field_organization_override')->first()->target_id);
    if ($organization_entity->hasTranslation($entity->get('langcode')->value)) {
      $translated_organization_entity = $organization_entity->getTranslation($entity->get('langcode')->value);
      $organization_name = $translated_organization_entity->getName();
    } else {
      $organization_name = $organization_entity->getName();
    }
  } else {
    $organization_name = $entity->get('field_organization_name')->value;
  }

  if ($entity->get('field_employment_type')->first()->target_id) {
    $employment_type_entity = \Drupal::entityTypeManager()->getStorage('taxonomy_term')->load($entity->get('field_employment_type')->first()->target_id);
    if ($employment_type_entity->hasTranslation($entity->get('langcode')->value)) {
      $translated_employment_type_entity = $employment_type_entity->getTranslation($entity->get('langcode')->value);
      $employment_type = $translated_employment_type_entity->getName();
    } else {
      $employment_type = $employment_type_entity->getName();
    }
  } else {
    $employment_type = '';
  }

  $structured_data = json_encode([
    '@context' => 'https://schema.org/',
    '@type' => 'JobPosting',
    'title' => $entity->getTitle(),
    'description' => $job_description,
    'identifier' => [
      '@type' => 'PropertyValue',
      'name' => t('City of Helsinki'),
      'value' => $entity->get('field_recruitment_id')->value,
    ],
    'datePosted' => $publication_starts_formatted,
    'validThrough' =>  $entity->get('field_publication_ends')->value,
    'employmentType' => $employment_type,
    'hiringOrganization' => [
      '@type' => 'Organization',
      'name' =>  $organization_name,
      'sameAs' => 'https://hel.fi/',
      'logo' => 'https://stplattaprod.blob.core.windows.net/strategiatalousprod/styles/original_l/azure/Helsinki_kehystunnus_1.png?itok=kHL18HKe'
    ],
    'jobLocation' => [
      '@type' => 'Place',
      'address' => [
        '@type' => 'PostalAddress',
        'streetAddress' => $entity->get('field_address')->value,
        'addressRegion' => $entity->get('field_postal_area')->value,
        'postalCode' => $entity->get('field_postal_code')->value,
        'addressCountry' => t('Finland'),
      ]
    ]
  ]);

  if (array_key_exists('#attached', $attachments)) {
    $attachments['#attached']['html_head'][] = [
      [
        '#tag' => 'script',
        '#attributes' => [
          'type' => 'application/ld+json',
        ],
        '#value' => $structured_data,
      ],
    ];
  }
}
